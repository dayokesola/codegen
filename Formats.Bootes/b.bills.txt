ENTITY

        /// <summary>
        /// Bill Class
        /// </summary>
        public class Bill : BaseEntity<int>
        {
            /// <summary>
            /// 
            /// </summary>
public string Name { get; set; }
/// <summary>
            /// 
            /// </summary>
public string Code { get; set; }
/// <summary>
            /// 
            /// </summary>
public int BillCategoryId { get; set; }
/// <summary>
            /// 
            /// </summary>
public decimal Amount { get; set; }
/// <summary>
            /// 
            /// </summary>
public decimal Charge { get; set; }
/// <summary>
            /// 
            /// </summary>
public int SortId { get; set; }

        }

-------------------------------------------------

MODEL

        /// <summary>
        /// Bill View Model
        /// </summary>
        [TableName("bts_billmodel")]
        [PrimaryKey("Id")]
        public class BillModel : BaseModel<int>
        {
            /// <summary>
            /// 
            /// </summary>
public string Name { get; set; }
/// <summary>
            /// 
            /// </summary>
public string Code { get; set; }
/// <summary>
            /// 
            /// </summary>
public int BillCategoryId { get; set; }
/// <summary>
            /// 
            /// </summary>
public decimal Amount { get; set; }
/// <summary>
            /// 
            /// </summary>
public decimal Charge { get; set; }
/// <summary>
            /// 
            /// </summary>
public int SortId { get; set; }

        }

-------------------------------------------------

FORM

        /// <summary>
        /// Bill Form
        /// </summary>
        public class BillForm : BaseForm<int>
        {
            /// <summary>
            /// 
            /// </summary>
public string Name { get; set; }
/// <summary>
            /// 
            /// </summary>
public string Code { get; set; }
/// <summary>
            /// 
            /// </summary>
public int BillCategoryId { get; set; }
/// <summary>
            /// 
            /// </summary>
public decimal Amount { get; set; }
/// <summary>
            /// 
            /// </summary>
public decimal Charge { get; set; }
/// <summary>
            /// 
            /// </summary>
public int SortId { get; set; }

        }

-------------------------------------------------

AUTOMAPPER CONFIG

            cfg.CreateMap<Bill, BillModel>().ReverseMap();
            cfg.CreateMap<Bill, BillForm>().ReverseMap();
            cfg.CreateMap<BillModel, BillForm>().ReverseMap();

-------------------------------------------------

MODEL FACTORY

        /// <summary>
        /// Bill Factory
        /// </summary>
        public class BillFactory : BaseFactory<Bill, BillModel, BillForm, int>
        {

        }

-------------------------------------------------


FACTORY SERVICE

        BillFactory Bills { get; }

        private BillFactory _bill;

        /// <summary>
        /// Bill Factory Module
        /// </summary>
        public BillFactory Bills { get { if (_bill == null) { _bill = new BillFactory(); } return _bill; } }

-------------------------------------------------

DB CONTEXT

        public DbSet<Bill> Bills { get; set; }
 
        For<BillModel>().TableName("bts_billmodel");

var txt = @"create view bts_billmodel as select x.* from bts_bill x where x.RecordStatus != 3 and x.RecordStatus != 4";
Sql(txt);



var txt = @"drop view bts_billmodel";
Sql(txt);

-------------------------------------------------

ENTITY REPOSITORY
    /// <summary>
    /// 
    /// </summary>
    public class BillRepository : BaseRepository<Bill, BillModel, int>
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        public BillRepository(BootesDbContext context) : base(context)
        {
        }
        /// <summary>
        /// IQueryable Bill Entity Search
        /// </summary>
        /// <param name="name"></param>
/// <param name="code"></param>
/// <param name="billCategoryId"></param>
/// <param name="amount"></param>
/// <param name="charge"></param>
/// <param name="sortId"></param>
/// <returns></returns>
        public IQueryable<Bill> Search(string name = "",string code = "",int billCategoryId = 0,decimal amount = 0,decimal charge = 0,int sortId = 0)
        {
            var table = Query();
            if (!string.IsNullOrEmpty(name))
            {
                table = table.Where(x => x.Name == name);
            }
if (!string.IsNullOrEmpty(code))
            {
                table = table.Where(x => x.Code == code);
            }
if (billCategoryId > 0)
            {
                table = table.Where(x => x.BillCategoryId == billCategoryId);
            }
if (amount > 0)
            {
                table = table.Where(x => x.Amount == amount);
            }
if (charge > 0)
            {
                table = table.Where(x => x.Charge == charge);
            }
if (sortId > 0)
            {
                table = table.Where(x => x.SortId == sortId);
            }
  
            return table;
        }

        /// <summary>
        /// Paged Bill Model Search
        /// </summary>
        /// <param name="name"></param>
/// <param name="code"></param>
/// <param name="billCategoryId"></param>
/// <param name="amount"></param>
/// <param name="charge"></param>
/// <param name="sortId"></param>
/// <param name="page"></param>
        ///<param name="pageSize"></param>
        ///<param name="sort"></param>
        /// <returns></returns>
        public Page<BillModel> SearchView(string name = "",string code = "",int billCategoryId = 0,decimal amount = 0,decimal charge = 0,int sortId = 0,
            long page = 1, long pageSize = 10, string sort = "Id")
        {
            var sql = "select * from " + Constants.DBPrefix + "billmodel where Id > 0 ";
            var c = 0;

            if (!string.IsNullOrEmpty(name))
            {
                sql += $" and Name = @{c} ";
                AddParam("name", name);
                c++;
            }
if (!string.IsNullOrEmpty(code))
            {
                sql += $" and Code = @{c} ";
                AddParam("code", code);
                c++;
            }
if (billCategoryId > 0)
            {
                sql += $" and BillCategoryId = @{c} ";
                AddParam("billCategoryId", billCategoryId);
                c++;
            }
if (amount > 0)
            {
                sql += $" and Amount = @{c} ";
                AddParam("amount", amount);
                c++;
            }
if (charge > 0)
            {
                sql += $" and Charge = @{c} ";
                AddParam("charge", charge);
                c++;
            }
if (sortId > 0)
            {
                sql += $" and SortId = @{c} ";
                AddParam("sortId", sortId);
                c++;
            }


            if(page <= 0)
            {
                var l = GetList(sql);
                return new Page<BillModel>()
                {
                    CurrentPage = 0,
                    Items = l,
                    ItemsPerPage = 0,
                    TotalItems = 0,
                    TotalPages = 0
                };
            }

           
            sql += ApplySort(sort); 
            var k = SearchView(sql, page, pageSize);
            return new Page<BillModel>()
            {
                CurrentPage = k.CurrentPage,
                Items = k.Items,
                ItemsPerPage = k.ItemsPerPage,
                TotalItems = k.TotalItems,
                TotalPages = k.TotalPages
            };
        }

        /// <summary>
        /// Get Bill Entity
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public BillModel GetModel(int Id)
        {
            var sql = "select * from " + Constants.DBPrefix + "billmodel where Id = @0"; 
            AddParam("Id", Id);
            return GetRecord(sql);
        }

        /// <summary>
        /// Check exists
        /// </summary>
        /// <param name="name"></param>
/// <param name="code"></param>
/// <param name="billCategoryId"></param>
/// <param name="amount"></param>
/// <param name="charge"></param>
/// <param name="sortId"></param>
/// 
        /// <param name="Id"></param>
        /// <returns></returns>
        public bool ItemExists(string name = "",string code = "",int billCategoryId = 0,decimal amount = 0,decimal charge = 0,int sortId = 0, int Id = 0)
        {
            var check = Search(name,code,billCategoryId,amount,charge,sortId);
            if (Id > 0)
            {
                check = check.Where(x => x.Id != Id);
            }
            return check.Any();
        }

        /// <summary>
        /// check exists
        /// </summary>
        /// <param name="model"></param>
        /// <param name="Id"></param>
        /// <returns></returns>
        public bool ItemExists(BillModel model, int Id = 0)
        {
            var check = Search(model.Name,model.Code,model.BillCategoryId,model.Amount,model.Charge,model.SortId);
            if (Id > 0)
            {
                check = check.Where(x => x.Id != Id);
            }
            return check.Any();
        }
    }

-------------------------------------------------

REPOSITORY SERVICE

        BillRepository Bills { get; }

        private BillRepository _bills;
        public BillRepository Bills { get { if (_bills == null) { _bills = new BillRepository(_context); } return _bills; } }


-------------------------------------------------

SERVICE


        /// <summary>
        /// Bill Service
        /// </summary>
        public partial class BillService : BaseService<Bill, BillModel, BillForm, int>
        {

        }


        /// <summary>
        /// Bill Service
        /// </summary>
        public partial class BillService : BaseService<Bill, BillModel, BillForm, int>
        {
            /// <summary>
            /// IQueryable Bill Entity Search
            /// </summary>
            /// <param name="name"></param>
/// <param name="code"></param>
/// <param name="billCategoryId"></param>
/// <param name="amount"></param>
/// <param name="charge"></param>
/// <param name="sortId"></param>
/// <returns></returns>
            public IQueryable<Bill> Search(string name = "",string code = "",int billCategoryId = 0,decimal amount = 0,decimal charge = 0,int sortId = 0)
            {
                return DataModule.Bills.Search(name,code,billCategoryId,amount,charge,sortId);
            }
            

            /// <summary>
            /// IEnumerable Bill Model Search
            /// </summary>
            /// <param name="name"></param>
/// <param name="code"></param>
/// <param name="billCategoryId"></param>
/// <param name="amount"></param>
/// <param name="charge"></param>
/// <param name="sortId"></param>
/// <returns></returns>
            public IEnumerable<BillModel> SearchModel(string name = "",string code = "",int billCategoryId = 0,decimal amount = 0,decimal charge = 0,int sortId = 0)
            {
                return DataModule.Bills.Search(name,code,billCategoryId,amount,charge,sortId)
                    .Select(FactoryModule.Bills.CreateModel);
            }

            
            /// <summary>
            /// Paged Bill Model Search
            /// </summary>
            /// <param name="name"></param>
/// <param name="code"></param>
/// <param name="billCategoryId"></param>
/// <param name="amount"></param>
/// <param name="charge"></param>
/// <param name="sortId"></param>
/// <param name="page"></param>
            ///<param name="pageSize"></param>
            ///<param name="sort"></param>
            /// <returns></returns>
            public Page<BillModel> SearchView(string name = "",string code = "",int billCategoryId = 0,decimal amount = 0,decimal charge = 0,int sortId = 0,
                long page = 1,long pageSize = 10, string sort = "")
            {
                return DataModule.Bills.SearchView(name,code,billCategoryId,amount,charge,sortId, page, pageSize, sort);
            }

            /// <summary>
            /// Create Bill Model from Bill Entity
            /// </summary>
            /// <param name="entity"></param>
            /// <returns></returns>
            public BillModel Create(Bill entity)
            {
                return FactoryModule.Bills.CreateModel(entity);
            }

	        /// <summary>
            /// Create Bill Model from Bill Form
            /// </summary>
            /// <param name="form"></param>
            /// <returns></returns>
            public BillModel Create(BillForm form)
            {
                return FactoryModule.Bills.CreateModel(form);
            }

            /// <summary>
            /// Create Bill Entity from Bill Model
            /// </summary>
            /// <param name="model"></param>
            /// <returns></returns>
            public Bill Create(BillModel model)
            {
                return FactoryModule.Bills.CreateEntity(model);
            }

            /// <summary>
            /// Check Uniqueness of Bill before creation
            /// </summary>
            /// <param name="model"></param>
            /// <returns></returns>
            public bool CreateExists(BillModel model)
            {
                return DataModule.Bills.ItemExists(model);
            }

            /// <summary>
            /// Delete Bill
            /// </summary>
            /// <param name="entity"></param>
            /// <returns></returns>
            public int Delete(Bill entity)
            {
                return DataModule.Bills.Delete(entity);
            }

            /// <summary>
            /// Get Bill Entity
            /// </summary>
            /// <param name="id"></param>
            /// <returns></returns>
            public Bill Get(int id)
            {
                return DataModule.Bills.Get(id);
            }



            /// <summary>
            /// Get Bill Model
            /// </summary>
            /// <param name="id"></param>
            /// <returns></returns>
            public BillModel GetModel(int id)
            { 
                return DataModule.Bills.GetModel(id);
            }

            /// <summary>
            /// Insert new Bill to DB
            /// </summary>
            /// <param name="model"></param>
            /// <param name="check"></param>
            /// <returns></returns>
            public BillModel Insert(BillModel model, bool check = true)
            {
                if (check)
                {
                    var routeSearch = DataModule.Bills.ItemExists(model);
                    if (routeSearch)
                    {
                        throw new Exception("Bill Name already exists");
                    }
                }
                var entity = FactoryModule.Bills.CreateEntity(model);
                entity.RecordStatus = Core.Domain.Enum.RecordStatus.Active;
                DataModule.Bills.Insert(entity);
                return FactoryModule.Bills.CreateModel(entity);
            }

            /// <summary>
            /// Update a Bill Entity with a Bill Model with selected fields
            /// </summary>
            /// <param name="entity"></param>
            /// <param name="model"></param>
            /// <param name="fields"></param>
            /// <returns></returns>
            public Bill Patch(Bill entity, BillModel model, string fields)
            {
                return FactoryModule.Bills.Patch(entity, model, fields);
            }

            /// <summary>
            /// Update Bill, with Patch Options Optional
            /// </summary>
            /// <param name="entity"></param>
            /// <param name="model"></param>
            /// <param name="fields"></param>
            /// <returns></returns>
            public BillModel Update(Bill entity, BillModel model = null, string fields = "")
            {
                if (model != null)
                {
                    entity = Patch(entity, model, fields);
                }
                return FactoryModule.Bills.CreateModel(DataModule.Bills.Update(entity));
            }

            /// <summary>
            /// Check Uniqueness of Bill before update
            /// </summary>
            /// <param name="model"></param>
            /// <returns></returns>
            public bool UpdateExists(BillModel model)
            {
                return DataModule.Bills.ItemExists(model, model.Id);
            }

    }

-------------------------------------------------

SERVICE MODULE

        BillService BillService { get; }

        private BillService _bill;

        /// <summary>
        /// Bill Service Module
        /// </summary>
        public BillService BillService { get { if (_bill == null) { _bill = new BillService(); } return _bill; } }
 

-------------------------------------------------

API CONTROLLER


    /// <summary>
    /// Bills CRUD
    /// </summary>
    [RoutePrefix("api/Bills")]
    public class BillsController : BaseApiController
    {
        /// <summary>
        /// Search, Page, filter and Shaped Bills
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="name"></param>
/// <param name="code"></param>
/// <param name="billCategoryId"></param>
/// <param name="amount"></param>
/// <param name="charge"></param>
/// <param name="sortId"></param>
/// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="fields"></param>
        /// <param name="draw"></param>
        /// <returns></returns>
        [ResponseType(typeof(IEnumerable<BillModel>))]
        [Route("Search", Name = "BillApi")]
        [HttpGet]
        public IHttpActionResult Get(string sort = "id", string name = "",string code = "",int billCategoryId = 0,decimal amount = 0,decimal charge = 0,int sortId = 0, long page = 1, long pageSize = 10, string fields= "", int draw = 1)
        {  
            try
            {
                var items = Logic.BillService.SearchView(name,code,billCategoryId,amount,charge,sortId,page, pageSize, sort);
                
                if (page > items.TotalPages) page = items.TotalPages;
                var jo = new JObjectHelper(); 
                jo.Add("name", name);
jo.Add("code", code);
jo.Add("billCategoryId", billCategoryId);
jo.Add("amount", amount);
jo.Add("charge", charge);
jo.Add("sortId", sortId);

                jo.Add("fields", fields); 
                jo.Add("sort", sort);
                var urlHelper = new UrlHelper(Request);
                var linkBuilder = new PageLinkBuilder(urlHelper, "BillApi", jo, page, pageSize, items.TotalItems, draw); 
                AddHeader("X-Pagination", linkBuilder.PaginationHeader);
                var dto = new List<BillModel>();
                if (items.TotalItems <= 0) return Ok(dto); 
                var dtos = items.Items.ShapeList(fields);
                return Ok(dtos);
            }
            catch(Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        }
        
        /// <summary>
        /// Get Bill by ID
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("Detail")]
        [ResponseType(typeof(BillModel))]
        public IHttpActionResult Get(int id)
        {
            try
            {
                var item = Logic.BillService.GetModel(id);
                if (item == null)
                {
                    return NotFound();
                }
                return Ok(item);
            }
            catch(Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        }

         /// <summary>
        /// Add Bill
        /// </summary>
        /// <param name="form"></param>
        /// <returns></returns>
        [Route("Create")]
        [HttpPost]
        [ResponseType(typeof(BillModel))]
        public IHttpActionResult Create(BillForm form)
        {
            try
            {
                var model = Logic.BillService.Create(form);
                var check = Logic.BillService.CreateExists(model);
                if (check)
                {
                    return BadRequest("Bill already exists");
                }
                var dto = Logic.BillService.Insert(model);
                return Ok(dto);
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        }

                /// <summary>
        /// Update Bill
        /// </summary>
        /// <param name="id"></param>
        /// <param name="form"></param>
        /// <returns></returns>
        [Route("Update")]
        [HttpPost]
        [ResponseType(typeof(BillModel))]
        public IHttpActionResult Update(int id, BillForm form)
        {
            try
            {
                var model = Logic.BillService.Create(form);
                if (id != model.Id)
                    return BadRequest("Route Parameter does mot match model ID"); 
                var found = Logic.BillService.Get(id);
                if (found == null)
                    return NotFound(); 
                var check = Logic.BillService.UpdateExists(model); 
                if (Logic.BillService.UpdateExists(model))
                    return BadRequest("Bill configuration already exists");
                var dto = Logic.BillService.Update(found, model,
                    "Name,Code,BillCategoryId,Amount,Charge,SortId,RecordStatus");
                return Ok(dto);
            } 
            catch (Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Delete Bill
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [Route("Delete")]
        [HttpPost]
        [ResponseType(typeof(BillModel))]
        public IHttpActionResult Delete(int id)
        {
            try
            {
                var found = Logic.BillService.Get(id);
                if (found == null)
                    return NotFound();
                Logic.BillService.Delete(found); 
                return Content(HttpStatusCode.NoContent,found);
            } 
            catch (Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        } 
    }


-------------------------------------------------

API Library Service
public class BillAPI : BaseServiceAPI<BillModel, int>
    { 
        public BillAPI()
        {
            _api = "/api/Bills";
        }
 
        public async Task<ApiResponse<IEnumerable<BillModel>>> Search(string name = "",string code = "",int billCategoryId = 0,decimal amount = 0,decimal charge = 0,int sortId = 0,
            string sort = "id",int page = 1, int pageSize = 10, string fields = "", bool extended = false)
        {
            var jo = new JObjectHelper(sort, page, pageSize, fields, extended);
            jo.Add("name", name);
jo.Add("code", code);
jo.Add("billCategoryId", billCategoryId);
jo.Add("amount", amount);
jo.Add("charge", charge);
jo.Add("sortId", sortId);
             
            Route("Search");
            return await Search<BillModel>(jo); 
        }        
    }

-------------------------------------------------

API Library MODULE
private BillAPI _bill;

        /// <summary>
        /// Bill API Module
        /// </summary>
        public BillAPI BillAPI { get { if (_bill == null) { _bill = new BillAPI(); } return _bill; } }


-------------------------------------------------

MVC CONTROLLER
     
    public class BillsController : BaseController
    {
        
        //[CustomAuth(Permissions = "BillsSearch")]
        public ActionResult Index(string name = "",string code = "",int billCategoryId = 0,decimal amount = 0,decimal charge = 0,int sortId = 0, string act="")
        {
            if (act.ToLower() == "export")
            {
                var data = Logic.BillService.SearchView(name,code,billCategoryId,amount,charge,sortId,page: 0);
                Download(data); 
            }
            return View();
        }

    }


-------------------------------------------------

SAVE VIEW

            

-------------------------------------------------

INDEX VIEW
@{
    ViewBag.Title = "Bills";
    ViewBag.Header = "Bills";
    string sim = Bootes.Core.Common.Constants.API_URL;
    
}
@section styles{


}

<div class="spp" data-perm="BillsSearch"></div>
 
   
 

  <div class="row" id="filterView"> 
            <div class="col-md-12">
                <div class="collapse" id="collapseExample">

                    <form action="" class="form p-3 mb-0 bg-light" method="get">
                        <div class="row">

                            <div class="form-group col-sm-12 col-md-3">
    <small>Name</small>
    <input type="text" name="name" id="name" value="" placeholder="Name" class="form-control form-control-sm" v-model="formsearch.Name" >
</div>
<div class="form-group col-sm-12 col-md-3">
    <small>Code</small>
    <input type="text" name="code" id="code" value="" placeholder="Code" class="form-control form-control-sm" v-model="formsearch.Code" >
</div>
<div class="form-group col-sm-12 col-md-3">
    <small>BillCategoryId</small>
    <input type="text" name="billCategoryId" id="billCategoryId" value="" placeholder="BillCategoryId" class="form-control form-control-sm" v-model="formsearch.BillCategoryId" >
</div>
<div class="form-group col-sm-12 col-md-3">
    <small>Amount</small>
    <input type="text" name="amount" id="amount" value="" placeholder="Amount" class="form-control form-control-sm" v-model="formsearch.Amount" >
</div>
<div class="form-group col-sm-12 col-md-3">
    <small>Charge</small>
    <input type="text" name="charge" id="charge" value="" placeholder="Charge" class="form-control form-control-sm" v-model="formsearch.Charge" >
</div>
<div class="form-group col-sm-12 col-md-3">
    <small>SortId</small>
    <input type="text" name="sortId" id="sortId" value="" placeholder="SortId" class="form-control form-control-sm" v-model="formsearch.SortId" >
</div>
 
                            
                            <div class="form-group col-sm-12 text-right mb-0">
                                <button class="btn btn-sm btn-warning" type="reset" value="Cancel">
                                    Cancel
                                </button>
                                <button class="btn btn-sm btn-primary" type="submit" name="act">
                                    Search
                                </button>
                                <button class="btn btn-sm btn-dark" type="submit" name="act" value="export">
                                    Export
                                </button>
                            </div>
                        </div>
                    </form>

                </div>

            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="text-right">
                    <a class="btn btn-light btn-sm" data-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
                        Filter/Export
                        <i class="fa fa-search"></i>
                    </a>
                    <a href="javascript:;" onclick="FormUtil.FormCreate()" role="button" class="btn btn-light btn-sm">
                        New
                        <i class="fa fa-plus"></i>
                    </a>
                </div>
                <table id="grid" class="table" style="width:100%">
                    <thead>
                        <tr>
                            <th>
                                <a href="javascript:;" onclick="FormUtil.FormCreate()">
                                    <i class="fa fa-plus"></i>
                                </a>
                            </th>
                             <th>Name</th> 
 <th>Code</th> 
 <th>BillCategoryId</th> 
 <th>Amount</th> 
 <th>Charge</th> 
 <th>SortId</th> 
 <th>Status</th> 
 <th>Created</th> 
 <th>Updated</th> 

                        </tr>
                    </thead>
                </table>
            </div>
        </div>

        <div id="appView">
        <!-- Modal -->
            <div class="modal fade" id="crudModal" tabindex="-1" role="dialog" aria-labelledby="crudModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="crudModallLabel">{{ frmTitle }}</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="col-md-12">
                                    <form method="post" @@submit.prevent="submit">

                                        <input data-val="true" data-val-number="The field Id must be a number." data-val-required="The Id field is required." id="Id"
                                            name="Id" type="hidden" value="0" v-model="form.Id" />
                                        <div class="white-box">
                                            <div class="row">
                                            <div class="form-group col-sm-12 col-md-4">
    <label class="req control-label" for="Name">Name</label>
    <input class="form-control text-box single-line" data-val="true" data-val-required="The Name field is required." id="Name"
        name="Name" type="text" value="" v-model="form.Name" />
</div>
<div class="form-group col-sm-12 col-md-4">
    <label class="req control-label" for="Code">Code</label>
    <input class="form-control text-box single-line" data-val="true" data-val-required="The Code field is required." id="Code"
        name="Code" type="text" value="" v-model="form.Code" />
</div>
<div class="form-group col-sm-12 col-md-4">
    <label class="req control-label" for="BillCategoryId">BillCategoryId</label>
    <input class="form-control text-box single-line" data-val="true" data-val-required="The BillCategoryId field is required." id="BillCategoryId"
        name="BillCategoryId" type="text" value="" v-model="form.BillCategoryId" />
</div>
<div class="form-group col-sm-12 col-md-4">
    <label class="req control-label" for="Amount">Amount</label>
    <input class="form-control text-box single-line" data-val="true" data-val-required="The Amount field is required." id="Amount"
        name="Amount" type="text" value="" v-model="form.Amount" />
</div>
<div class="form-group col-sm-12 col-md-4">
    <label class="req control-label" for="Charge">Charge</label>
    <input class="form-control text-box single-line" data-val="true" data-val-required="The Charge field is required." id="Charge"
        name="Charge" type="text" value="" v-model="form.Charge" />
</div>
<div class="form-group col-sm-12 col-md-4">
    <label class="req control-label" for="SortId">SortId</label>
    <input class="form-control text-box single-line" data-val="true" data-val-required="The SortId field is required." id="SortId"
        name="SortId" type="text" value="" v-model="form.SortId" />
</div>

                                                  
                                                <div class="form-group col-sm-6">

                                                    <input checked="checked" data-val="true" data-val-required="The RecordStatus field is required." id="RecordStatus" name="RecordStatus"
                                                        type="radio" value="0"  v-model="form.RecordStatus" />
                                                    <label>Pending</label>
                                                    <input id="RecordStatus" name="RecordStatus" type="radio" value="1" v-model="form.RecordStatus" />
                                                    <label>Active</label>
                                                    <input id="RecordStatus" name="RecordStatus" type="radio" value="2" v-model="form.RecordStatus" />
                                                    <label>Disabled</label>
                                                </div>
                                                <div class="form-group col-sm-6 text-right">
                                                    <button type="reset" class="btn btn-warning btn-sm">Cancel</button>
                                                    <input type="submit" value="Submit" class="btn btn-primary btn-sm" />
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="detailModal" tabindex="-1" role="dialog" aria-labelledby="detailModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="detailModalLabel">{{ frmTitle }}</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <dl class="row">
 
                                
                                <dt class="col-sm-3">Name</dt>
                                <dd class="col-sm-9">{{ form.Name }}</dd>

                                <dt class="col-sm-3">Code</dt>
                                <dd class="col-sm-9">{{ form.Code }}</dd>

                                <dt class="col-sm-3">BillCategoryId</dt>
                                <dd class="col-sm-9">{{ form.BillCategoryId }}</dd>

                                <dt class="col-sm-3">Amount</dt>
                                <dd class="col-sm-9">{{ form.Amount }}</dd>

                                <dt class="col-sm-3">Charge</dt>
                                <dd class="col-sm-9">{{ form.Charge }}</dd>

                                <dt class="col-sm-3">SortId</dt>
                                <dd class="col-sm-9">{{ form.SortId }}</dd>
 


                                
                                <dt class="col-sm-3">Status</dt>
                                <dd class="col-sm-9">{{ form.RecordStatusText }}</dd>
                                
                                <dt class="col-sm-3">Created</dt>
                                <dd class="col-sm-9">{{ form.CreatedAtText }}</dd>
                                
                                <dt class="col-sm-3">Updated</dt>
                                <dd class="col-sm-9">{{ form.UpdatedAtText }}</dd>
                            </dl> 
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-danger btn-sm" v-on:click="deleteItem">Delete</button>
                        </div>
                    </div>
                </div>
            </div>


        </div>


@section scripts
{
  <script type="text/javascript">

        $(document).ready(function () {
            
            var _form = {
                Id: 0,
Name: "",
Code: "",
BillCategoryId: "",
Amount: "",
Charge: "",
SortId: ""
            };

            var _formsearch = {
                Id: 0,
Name: "",
Code: "",
BillCategoryId: "",
Amount: "",
Charge: "",
SortId: ""
            };
            var _columns = [
                {
                    "data": "Id",
                    "render": function (data, type, row, meta) {
                        return '<a href="javascript:;" onclick="FormUtil.FormUpdate(' + data + ')"><i class="fa fa-edit"></i></a> <a href="javascript:;" onclick="FormUtil.FormDetail(' + data + ')"><i class="fa fa-external-link-alt"></i></a>';
                    }
                },
                
{"data": "Name" },
{"data": "Code" },
{"data": "BillCategoryId" },
{"data": "Amount" },
{"data": "Charge" },
{"data": "SortId" },
{"data": "RecordStatusText" },
{"data": "CreatedAtText" },
{"data": "UpdatedAtText" }
            ];

            var _list = {
                id: 0
            };

            FormUtil.Init({
                entity: 'Bills',
                url: '@sim',
                form: _form,
                formsearch: _formsearch,
                columns: _columns,
                table: 'grid',
                createModal: 'crudModal',
                updateModal: 'crudModal',
                detailModal: 'detailModal',
                list: _list
            });
        });
    </script>
}


-------------------------------------------------

