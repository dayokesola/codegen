ENTITY

        /// <summary>
        /// BillCategory Class
        /// </summary>
        public class BillCategory : BaseEntity<int>
        {
            /// <summary>
            /// 
            /// </summary>
public string Name { get; set; }
/// <summary>
            /// 
            /// </summary>
public string Code { get; set; }
/// <summary>
            /// 
            /// </summary>
public int BillGroupId { get; set; }
/// <summary>
            /// 
            /// </summary>
public string Info { get; set; }
/// <summary>
            /// 
            /// </summary>
public int SortId { get; set; }
/// <summary>
            /// 
            /// </summary>
public string Icon { get; set; }

        }

-------------------------------------------------

MODEL

        /// <summary>
        /// BillCategory View Model
        /// </summary>
        [TableName("bts_billcategorymodel")]
        [PrimaryKey("Id")]
        public class BillCategoryModel : BaseModel<int>
        {
            /// <summary>
            /// 
            /// </summary>
public string Name { get; set; }
/// <summary>
            /// 
            /// </summary>
public string Code { get; set; }
/// <summary>
            /// 
            /// </summary>
public int BillGroupId { get; set; }
/// <summary>
            /// 
            /// </summary>
public string Info { get; set; }
/// <summary>
            /// 
            /// </summary>
public int SortId { get; set; }
/// <summary>
            /// 
            /// </summary>
public string Icon { get; set; }

        }

-------------------------------------------------

FORM

        /// <summary>
        /// BillCategory Form
        /// </summary>
        public class BillCategoryForm : BaseForm<int>
        {
            /// <summary>
            /// 
            /// </summary>
public string Name { get; set; }
/// <summary>
            /// 
            /// </summary>
public string Code { get; set; }
/// <summary>
            /// 
            /// </summary>
public int BillGroupId { get; set; }
/// <summary>
            /// 
            /// </summary>
public string Info { get; set; }
/// <summary>
            /// 
            /// </summary>
public int SortId { get; set; }
/// <summary>
            /// 
            /// </summary>
public string Icon { get; set; }

        }

-------------------------------------------------

AUTOMAPPER CONFIG

            cfg.CreateMap<BillCategory, BillCategoryModel>().ReverseMap();
            cfg.CreateMap<BillCategory, BillCategoryForm>().ReverseMap();
            cfg.CreateMap<BillCategoryModel, BillCategoryForm>().ReverseMap();

-------------------------------------------------

MODEL FACTORY

        /// <summary>
        /// BillCategory Factory
        /// </summary>
        public class BillCategoryFactory : BaseFactory<BillCategory, BillCategoryModel, BillCategoryForm, int>
        {

        }

-------------------------------------------------


FACTORY SERVICE

        BillCategoryFactory BillGategories { get; }

        private BillCategoryFactory _billcategory;

        /// <summary>
        /// BillCategory Factory Module
        /// </summary>
        public BillCategoryFactory BillGategories { get { if (_billcategory == null) { _billcategory = new BillCategoryFactory(); } return _billcategory; } }

-------------------------------------------------

DB CONTEXT

        public DbSet<BillCategory> BillGategories { get; set; }
 
        For<BillCategoryModel>().TableName("bts_billcategorymodel");

var txt = @"create view bts_billcategorymodel as select x.* from bts_billcategory x where x.RecordStatus != 3 and x.RecordStatus != 4";
Sql(txt);



var txt = @"drop view bts_billcategorymodel";
Sql(txt);

-------------------------------------------------

ENTITY REPOSITORY
    /// <summary>
    /// 
    /// </summary>
    public class BillCategoryRepository : BaseRepository<BillCategory, BillCategoryModel, int>
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="context"></param>
        public BillCategoryRepository(BootesDbContext context) : base(context)
        {
        }
        /// <summary>
        /// IQueryable BillCategory Entity Search
        /// </summary>
        /// <param name="name"></param>
/// <param name="code"></param>
/// <param name="billGroupId"></param>
/// <param name="info"></param>
/// <param name="sortId"></param>
/// <param name="icon"></param>
/// <returns></returns>
        public IQueryable<BillCategory> Search(string name = "",string code = "",int billGroupId = 0,string info = "",int sortId = 0,string icon = "")
        {
            var table = Query();
            if (!string.IsNullOrEmpty(name))
            {
                table = table.Where(x => x.Name == name);
            }
if (!string.IsNullOrEmpty(code))
            {
                table = table.Where(x => x.Code == code);
            }
if (billGroupId > 0)
            {
                table = table.Where(x => x.BillGroupId == billGroupId);
            }
if (!string.IsNullOrEmpty(info))
            {
                table = table.Where(x => x.Info == info);
            }
if (sortId > 0)
            {
                table = table.Where(x => x.SortId == sortId);
            }
if (!string.IsNullOrEmpty(icon))
            {
                table = table.Where(x => x.Icon == icon);
            }
  
            return table;
        }

        /// <summary>
        /// Paged BillCategory Model Search
        /// </summary>
        /// <param name="name"></param>
/// <param name="code"></param>
/// <param name="billGroupId"></param>
/// <param name="info"></param>
/// <param name="sortId"></param>
/// <param name="icon"></param>
/// <param name="page"></param>
        ///<param name="pageSize"></param>
        ///<param name="sort"></param>
        /// <returns></returns>
        public Page<BillCategoryModel> SearchView(string name = "",string code = "",int billGroupId = 0,string info = "",int sortId = 0,string icon = "",
            long page = 1, long pageSize = 10, string sort = "Id")
        {
            var sql = "select * from " + Constants.DBPrefix + "billcategorymodel where Id > 0 ";
            var c = 0;

            if (!string.IsNullOrEmpty(name))
            {
                sql += $" and Name = @{c} ";
                AddParam("name", name);
                c++;
            }
if (!string.IsNullOrEmpty(code))
            {
                sql += $" and Code = @{c} ";
                AddParam("code", code);
                c++;
            }
if (billGroupId > 0)
            {
                sql += $" and BillGroupId = @{c} ";
                AddParam("billGroupId", billGroupId);
                c++;
            }
if (!string.IsNullOrEmpty(info))
            {
                sql += $" and Info = @{c} ";
                AddParam("info", info);
                c++;
            }
if (sortId > 0)
            {
                sql += $" and SortId = @{c} ";
                AddParam("sortId", sortId);
                c++;
            }
if (!string.IsNullOrEmpty(icon))
            {
                sql += $" and Icon = @{c} ";
                AddParam("icon", icon);
                c++;
            }


            if(page <= 0)
            {
                var l = GetList(sql);
                return new Page<BillCategoryModel>()
                {
                    CurrentPage = 0,
                    Items = l,
                    ItemsPerPage = 0,
                    TotalItems = 0,
                    TotalPages = 0
                };
            }

           
            sql += ApplySort(sort); 
            var k = SearchView(sql, page, pageSize);
            return new Page<BillCategoryModel>()
            {
                CurrentPage = k.CurrentPage,
                Items = k.Items,
                ItemsPerPage = k.ItemsPerPage,
                TotalItems = k.TotalItems,
                TotalPages = k.TotalPages
            };
        }

        /// <summary>
        /// Get BillCategory Entity
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public BillCategoryModel GetModel(int Id)
        {
            var sql = "select * from " + Constants.DBPrefix + "billcategorymodel where Id = @0"; 
            AddParam("Id", Id);
            return GetRecord(sql);
        }

        /// <summary>
        /// Check exists
        /// </summary>
        /// <param name="name"></param>
/// <param name="code"></param>
/// <param name="billGroupId"></param>
/// <param name="info"></param>
/// <param name="sortId"></param>
/// <param name="icon"></param>
/// 
        /// <param name="Id"></param>
        /// <returns></returns>
        public bool ItemExists(string name = "",string code = "",int billGroupId = 0,string info = "",int sortId = 0,string icon = "", int Id = 0)
        {
            var check = Search(name,code,billGroupId,info,sortId,icon);
            if (Id > 0)
            {
                check = check.Where(x => x.Id != Id);
            }
            return check.Any();
        }

        /// <summary>
        /// check exists
        /// </summary>
        /// <param name="model"></param>
        /// <param name="Id"></param>
        /// <returns></returns>
        public bool ItemExists(BillCategoryModel model, int Id = 0)
        {
            var check = Search(model.Name,model.Code,model.BillGroupId,model.Info,model.SortId,model.Icon);
            if (Id > 0)
            {
                check = check.Where(x => x.Id != Id);
            }
            return check.Any();
        }
    }

-------------------------------------------------

REPOSITORY SERVICE

        BillCategoryRepository BillGategories { get; }

        private BillCategoryRepository _billgategories;
        public BillCategoryRepository BillGategories { get { if (_billgategories == null) { _billgategories = new BillCategoryRepository(_context); } return _billgategories; } }


-------------------------------------------------

SERVICE


        /// <summary>
        /// BillCategory Service
        /// </summary>
        public partial class BillCategoryService : BaseService<BillCategory, BillCategoryModel, BillCategoryForm, int>
        {

        }


        /// <summary>
        /// BillCategory Service
        /// </summary>
        public partial class BillCategoryService : BaseService<BillCategory, BillCategoryModel, BillCategoryForm, int>
        {
            /// <summary>
            /// IQueryable BillCategory Entity Search
            /// </summary>
            /// <param name="name"></param>
/// <param name="code"></param>
/// <param name="billGroupId"></param>
/// <param name="info"></param>
/// <param name="sortId"></param>
/// <param name="icon"></param>
/// <returns></returns>
            public IQueryable<BillCategory> Search(string name = "",string code = "",int billGroupId = 0,string info = "",int sortId = 0,string icon = "")
            {
                return DataModule.BillGategories.Search(name,code,billGroupId,info,sortId,icon);
            }
            

            /// <summary>
            /// IEnumerable BillCategory Model Search
            /// </summary>
            /// <param name="name"></param>
/// <param name="code"></param>
/// <param name="billGroupId"></param>
/// <param name="info"></param>
/// <param name="sortId"></param>
/// <param name="icon"></param>
/// <returns></returns>
            public IEnumerable<BillCategoryModel> SearchModel(string name = "",string code = "",int billGroupId = 0,string info = "",int sortId = 0,string icon = "")
            {
                return DataModule.BillGategories.Search(name,code,billGroupId,info,sortId,icon)
                    .Select(FactoryModule.BillGategories.CreateModel);
            }

            
            /// <summary>
            /// Paged BillCategory Model Search
            /// </summary>
            /// <param name="name"></param>
/// <param name="code"></param>
/// <param name="billGroupId"></param>
/// <param name="info"></param>
/// <param name="sortId"></param>
/// <param name="icon"></param>
/// <param name="page"></param>
            ///<param name="pageSize"></param>
            ///<param name="sort"></param>
            /// <returns></returns>
            public Page<BillCategoryModel> SearchView(string name = "",string code = "",int billGroupId = 0,string info = "",int sortId = 0,string icon = "",
                long page = 1,long pageSize = 10, string sort = "")
            {
                return DataModule.BillGategories.SearchView(name,code,billGroupId,info,sortId,icon, page, pageSize, sort);
            }

            /// <summary>
            /// Create BillCategory Model from BillCategory Entity
            /// </summary>
            /// <param name="entity"></param>
            /// <returns></returns>
            public BillCategoryModel Create(BillCategory entity)
            {
                return FactoryModule.BillGategories.CreateModel(entity);
            }

	        /// <summary>
            /// Create BillCategory Model from BillCategory Form
            /// </summary>
            /// <param name="form"></param>
            /// <returns></returns>
            public BillCategoryModel Create(BillCategoryForm form)
            {
                return FactoryModule.BillGategories.CreateModel(form);
            }

            /// <summary>
            /// Create BillCategory Entity from BillCategory Model
            /// </summary>
            /// <param name="model"></param>
            /// <returns></returns>
            public BillCategory Create(BillCategoryModel model)
            {
                return FactoryModule.BillGategories.CreateEntity(model);
            }

            /// <summary>
            /// Check Uniqueness of BillCategory before creation
            /// </summary>
            /// <param name="model"></param>
            /// <returns></returns>
            public bool CreateExists(BillCategoryModel model)
            {
                return DataModule.BillGategories.ItemExists(model);
            }

            /// <summary>
            /// Delete BillCategory
            /// </summary>
            /// <param name="entity"></param>
            /// <returns></returns>
            public int Delete(BillCategory entity)
            {
                return DataModule.BillGategories.Delete(entity);
            }

            /// <summary>
            /// Get BillCategory Entity
            /// </summary>
            /// <param name="id"></param>
            /// <returns></returns>
            public BillCategory Get(int id)
            {
                return DataModule.BillGategories.Get(id);
            }



            /// <summary>
            /// Get BillCategory Model
            /// </summary>
            /// <param name="id"></param>
            /// <returns></returns>
            public BillCategoryModel GetModel(int id)
            { 
                return DataModule.BillGategories.GetModel(id);
            }

            /// <summary>
            /// Insert new BillCategory to DB
            /// </summary>
            /// <param name="model"></param>
            /// <param name="check"></param>
            /// <returns></returns>
            public BillCategoryModel Insert(BillCategoryModel model, bool check = true)
            {
                if (check)
                {
                    var routeSearch = DataModule.BillGategories.ItemExists(model);
                    if (routeSearch)
                    {
                        throw new Exception("BillCategory Name already exists");
                    }
                }
                var entity = FactoryModule.BillGategories.CreateEntity(model);
                entity.RecordStatus = Core.Domain.Enum.RecordStatus.Active;
                DataModule.BillGategories.Insert(entity);
                return FactoryModule.BillGategories.CreateModel(entity);
            }

            /// <summary>
            /// Update a BillCategory Entity with a BillCategory Model with selected fields
            /// </summary>
            /// <param name="entity"></param>
            /// <param name="model"></param>
            /// <param name="fields"></param>
            /// <returns></returns>
            public BillCategory Patch(BillCategory entity, BillCategoryModel model, string fields)
            {
                return FactoryModule.BillGategories.Patch(entity, model, fields);
            }

            /// <summary>
            /// Update BillCategory, with Patch Options Optional
            /// </summary>
            /// <param name="entity"></param>
            /// <param name="model"></param>
            /// <param name="fields"></param>
            /// <returns></returns>
            public BillCategoryModel Update(BillCategory entity, BillCategoryModel model = null, string fields = "")
            {
                if (model != null)
                {
                    entity = Patch(entity, model, fields);
                }
                return FactoryModule.BillGategories.CreateModel(DataModule.BillGategories.Update(entity));
            }

            /// <summary>
            /// Check Uniqueness of BillCategory before update
            /// </summary>
            /// <param name="model"></param>
            /// <returns></returns>
            public bool UpdateExists(BillCategoryModel model)
            {
                return DataModule.BillGategories.ItemExists(model, model.Id);
            }

    }

-------------------------------------------------

SERVICE MODULE

        BillCategoryService BillCategoryService { get; }

        private BillCategoryService _billcategory;

        /// <summary>
        /// BillCategory Service Module
        /// </summary>
        public BillCategoryService BillCategoryService { get { if (_billcategory == null) { _billcategory = new BillCategoryService(); } return _billcategory; } }
 

-------------------------------------------------

API CONTROLLER


    /// <summary>
    /// BillGategories CRUD
    /// </summary>
    [RoutePrefix("api/BillGategories")]
    public class BillGategoriesController : BaseApiController
    {
        /// <summary>
        /// Search, Page, filter and Shaped BillGategories
        /// </summary>
        /// <param name="sort"></param>
        /// <param name="name"></param>
/// <param name="code"></param>
/// <param name="billGroupId"></param>
/// <param name="info"></param>
/// <param name="sortId"></param>
/// <param name="icon"></param>
/// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="fields"></param>
        /// <param name="draw"></param>
        /// <returns></returns>
        [ResponseType(typeof(IEnumerable<BillCategoryModel>))]
        [Route("Search", Name = "BillCategoryApi")]
        [HttpGet]
        public IHttpActionResult Get(string sort = "id", string name = "",string code = "",int billGroupId = 0,string info = "",int sortId = 0,string icon = "", long page = 1, long pageSize = 10, string fields= "", int draw = 1)
        {  
            try
            {
                var items = Logic.BillCategoryService.SearchView(name,code,billGroupId,info,sortId,icon,page, pageSize, sort);
                
                if (page > items.TotalPages) page = items.TotalPages;
                var jo = new JObjectHelper(); 
                jo.Add("name", name);
jo.Add("code", code);
jo.Add("billGroupId", billGroupId);
jo.Add("info", info);
jo.Add("sortId", sortId);
jo.Add("icon", icon);

                jo.Add("fields", fields); 
                jo.Add("sort", sort);
                var urlHelper = new UrlHelper(Request);
                var linkBuilder = new PageLinkBuilder(urlHelper, "BillCategoryApi", jo, page, pageSize, items.TotalItems, draw); 
                AddHeader("X-Pagination", linkBuilder.PaginationHeader);
                var dto = new List<BillCategoryModel>();
                if (items.TotalItems <= 0) return Ok(dto); 
                var dtos = items.Items.ShapeList(fields);
                return Ok(dtos);
            }
            catch(Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        }
        
        /// <summary>
        /// Get BillCategory by ID
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("Detail")]
        [ResponseType(typeof(BillCategoryModel))]
        public IHttpActionResult Get(int id)
        {
            try
            {
                var item = Logic.BillCategoryService.GetModel(id);
                if (item == null)
                {
                    return NotFound();
                }
                return Ok(item);
            }
            catch(Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        }

         /// <summary>
        /// Add BillCategory
        /// </summary>
        /// <param name="form"></param>
        /// <returns></returns>
        [Route("Create")]
        [HttpPost]
        [ResponseType(typeof(BillCategoryModel))]
        public IHttpActionResult Create(BillCategoryForm form)
        {
            try
            {
                var model = Logic.BillCategoryService.Create(form);
                var check = Logic.BillCategoryService.CreateExists(model);
                if (check)
                {
                    return BadRequest("BillCategory already exists");
                }
                var dto = Logic.BillCategoryService.Insert(model);
                return Ok(dto);
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        }

                /// <summary>
        /// Update BillCategory
        /// </summary>
        /// <param name="id"></param>
        /// <param name="form"></param>
        /// <returns></returns>
        [Route("Update")]
        [HttpPost]
        [ResponseType(typeof(BillCategoryModel))]
        public IHttpActionResult Update(int id, BillCategoryForm form)
        {
            try
            {
                var model = Logic.BillCategoryService.Create(form);
                if (id != model.Id)
                    return BadRequest("Route Parameter does mot match model ID"); 
                var found = Logic.BillCategoryService.Get(id);
                if (found == null)
                    return NotFound(); 
                var check = Logic.BillCategoryService.UpdateExists(model); 
                if (Logic.BillCategoryService.UpdateExists(model))
                    return BadRequest("BillCategory configuration already exists");
                var dto = Logic.BillCategoryService.Update(found, model,
                    "Name,Code,BillGroupId,Info,SortId,Icon,RecordStatus");
                return Ok(dto);
            } 
            catch (Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Delete BillCategory
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [Route("Delete")]
        [HttpPost]
        [ResponseType(typeof(BillCategoryModel))]
        public IHttpActionResult Delete(int id)
        {
            try
            {
                var found = Logic.BillCategoryService.Get(id);
                if (found == null)
                    return NotFound();
                Logic.BillCategoryService.Delete(found); 
                return Content(HttpStatusCode.NoContent,found);
            } 
            catch (Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        } 
    }


-------------------------------------------------

API Library Service
public class BillCategoryAPI : BaseServiceAPI<BillCategoryModel, int>
    { 
        public BillCategoryAPI()
        {
            _api = "/api/BillGategories";
        }
 
        public async Task<ApiResponse<IEnumerable<BillCategoryModel>>> Search(string name = "",string code = "",int billGroupId = 0,string info = "",int sortId = 0,string icon = "",
            string sort = "id",int page = 1, int pageSize = 10, string fields = "", bool extended = false)
        {
            var jo = new JObjectHelper(sort, page, pageSize, fields, extended);
            jo.Add("name", name);
jo.Add("code", code);
jo.Add("billGroupId", billGroupId);
jo.Add("info", info);
jo.Add("sortId", sortId);
jo.Add("icon", icon);
             
            Route("Search");
            return await Search<BillCategoryModel>(jo); 
        }        
    }

-------------------------------------------------

API Library MODULE
private BillCategoryAPI _billcategory;

        /// <summary>
        /// BillCategory API Module
        /// </summary>
        public BillCategoryAPI BillCategoryAPI { get { if (_billcategory == null) { _billcategory = new BillCategoryAPI(); } return _billcategory; } }


-------------------------------------------------

MVC CONTROLLER
     
    public class BillGategoriesController : BaseController
    {
        
        //[CustomAuth(Permissions = "BillGategoriesSearch")]
        public ActionResult Index(string name = "",string code = "",int billGroupId = 0,string info = "",int sortId = 0,string icon = "", string act="")
        {
            if (act.ToLower() == "export")
            {
                var data = Logic.BillCategoryService.SearchView(name,code,billGroupId,info,sortId,icon,page: 0);
                Download(data); 
            }
            return View();
        }

    }


-------------------------------------------------

SAVE VIEW

            

-------------------------------------------------

INDEX VIEW
@{
    ViewBag.Title = "BillGategories";
    ViewBag.Header = "BillGategories";
    string sim = Bootes.Core.Common.Constants.API_URL;
    
}
@section styles{


}

<div class="spp" data-perm="BillGategoriesSearch"></div>
 
   
 

  <div class="row" id="filterView"> 
            <div class="col-md-12">
                <div class="collapse" id="collapseExample">

                    <form action="" class="form p-3 mb-0 bg-light" method="get">
                        <div class="row">

                            <div class="form-group col-sm-12 col-md-3">
    <small>Name</small>
    <input type="text" name="name" id="name" value="" placeholder="Name" class="form-control form-control-sm" v-model="formsearch.Name" >
</div>
<div class="form-group col-sm-12 col-md-3">
    <small>Code</small>
    <input type="text" name="code" id="code" value="" placeholder="Code" class="form-control form-control-sm" v-model="formsearch.Code" >
</div>
<div class="form-group col-sm-12 col-md-3">
    <small>BillGroupId</small>
    <input type="text" name="billGroupId" id="billGroupId" value="" placeholder="BillGroupId" class="form-control form-control-sm" v-model="formsearch.BillGroupId" >
</div>
<div class="form-group col-sm-12 col-md-3">
    <small>Info</small>
    <input type="text" name="info" id="info" value="" placeholder="Info" class="form-control form-control-sm" v-model="formsearch.Info" >
</div>
<div class="form-group col-sm-12 col-md-3">
    <small>SortId</small>
    <input type="text" name="sortId" id="sortId" value="" placeholder="SortId" class="form-control form-control-sm" v-model="formsearch.SortId" >
</div>
<div class="form-group col-sm-12 col-md-3">
    <small>Icon</small>
    <input type="text" name="icon" id="icon" value="" placeholder="Icon" class="form-control form-control-sm" v-model="formsearch.Icon" >
</div>
 
                            
                            <div class="form-group col-sm-12 text-right mb-0">
                                <button class="btn btn-sm btn-warning" type="reset" value="Cancel">
                                    Cancel
                                </button>
                                <button class="btn btn-sm btn-primary" type="submit" name="act">
                                    Search
                                </button>
                                <button class="btn btn-sm btn-dark" type="submit" name="act" value="export">
                                    Export
                                </button>
                            </div>
                        </div>
                    </form>

                </div>

            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="text-right">
                    <a class="btn btn-light btn-sm" data-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
                        Filter/Export
                        <i class="fa fa-search"></i>
                    </a>
                    <a href="javascript:;" onclick="FormUtil.FormCreate()" role="button" class="btn btn-light btn-sm">
                        New
                        <i class="fa fa-plus"></i>
                    </a>
                </div>
                <table id="grid" class="table" style="width:100%">
                    <thead>
                        <tr>
                            <th>
                                <a href="javascript:;" onclick="FormUtil.FormCreate()">
                                    <i class="fa fa-plus"></i>
                                </a>
                            </th>
                             <th>Name</th> 
 <th>Code</th> 
 <th>BillGroupId</th> 
 <th>Info</th> 
 <th>SortId</th> 
 <th>Icon</th> 
 <th>Status</th> 
 <th>Created</th> 
 <th>Updated</th> 

                        </tr>
                    </thead>
                </table>
            </div>
        </div>

        <div id="appView">
        <!-- Modal -->
            <div class="modal fade" id="crudModal" tabindex="-1" role="dialog" aria-labelledby="crudModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="crudModallLabel">{{ frmTitle }}</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="col-md-12">
                                    <form method="post" @@submit.prevent="submit">

                                        <input data-val="true" data-val-number="The field Id must be a number." data-val-required="The Id field is required." id="Id"
                                            name="Id" type="hidden" value="0" v-model="form.Id" />
                                        <div class="white-box">
                                            <div class="row">
                                            <div class="form-group col-sm-12 col-md-4">
    <label class="req control-label" for="Name">Name</label>
    <input class="form-control text-box single-line" data-val="true" data-val-required="The Name field is required." id="Name"
        name="Name" type="text" value="" v-model="form.Name" />
</div>
<div class="form-group col-sm-12 col-md-4">
    <label class="req control-label" for="Code">Code</label>
    <input class="form-control text-box single-line" data-val="true" data-val-required="The Code field is required." id="Code"
        name="Code" type="text" value="" v-model="form.Code" />
</div>
<div class="form-group col-sm-12 col-md-4">
    <label class="req control-label" for="BillGroupId">BillGroupId</label>
    <input class="form-control text-box single-line" data-val="true" data-val-required="The BillGroupId field is required." id="BillGroupId"
        name="BillGroupId" type="text" value="" v-model="form.BillGroupId" />
</div>
<div class="form-group col-sm-12 col-md-4">
    <label class="req control-label" for="Info">Info</label>
    <input class="form-control text-box single-line" data-val="true" data-val-required="The Info field is required." id="Info"
        name="Info" type="text" value="" v-model="form.Info" />
</div>
<div class="form-group col-sm-12 col-md-4">
    <label class="req control-label" for="SortId">SortId</label>
    <input class="form-control text-box single-line" data-val="true" data-val-required="The SortId field is required." id="SortId"
        name="SortId" type="text" value="" v-model="form.SortId" />
</div>
<div class="form-group col-sm-12 col-md-4">
    <label class="req control-label" for="Icon">Icon</label>
    <input class="form-control text-box single-line" data-val="true" data-val-required="The Icon field is required." id="Icon"
        name="Icon" type="text" value="" v-model="form.Icon" />
</div>

                                                  
                                                <div class="form-group col-sm-6">

                                                    <input checked="checked" data-val="true" data-val-required="The RecordStatus field is required." id="RecordStatus" name="RecordStatus"
                                                        type="radio" value="0"  v-model="form.RecordStatus" />
                                                    <label>Pending</label>
                                                    <input id="RecordStatus" name="RecordStatus" type="radio" value="1" v-model="form.RecordStatus" />
                                                    <label>Active</label>
                                                    <input id="RecordStatus" name="RecordStatus" type="radio" value="2" v-model="form.RecordStatus" />
                                                    <label>Disabled</label>
                                                </div>
                                                <div class="form-group col-sm-6 text-right">
                                                    <button type="reset" class="btn btn-warning btn-sm">Cancel</button>
                                                    <input type="submit" value="Submit" class="btn btn-primary btn-sm" />
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>

            <div class="modal fade" id="detailModal" tabindex="-1" role="dialog" aria-labelledby="detailModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="detailModalLabel">{{ frmTitle }}</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <dl class="row">
 
                                
                                <dt class="col-sm-3">Name</dt>
                                <dd class="col-sm-9">{{ form.Name }}</dd>

                                <dt class="col-sm-3">Code</dt>
                                <dd class="col-sm-9">{{ form.Code }}</dd>

                                <dt class="col-sm-3">BillGroupId</dt>
                                <dd class="col-sm-9">{{ form.BillGroupId }}</dd>

                                <dt class="col-sm-3">Info</dt>
                                <dd class="col-sm-9">{{ form.Info }}</dd>

                                <dt class="col-sm-3">SortId</dt>
                                <dd class="col-sm-9">{{ form.SortId }}</dd>

                                <dt class="col-sm-3">Icon</dt>
                                <dd class="col-sm-9">{{ form.Icon }}</dd>
 


                                
                                <dt class="col-sm-3">Status</dt>
                                <dd class="col-sm-9">{{ form.RecordStatusText }}</dd>
                                
                                <dt class="col-sm-3">Created</dt>
                                <dd class="col-sm-9">{{ form.CreatedAtText }}</dd>
                                
                                <dt class="col-sm-3">Updated</dt>
                                <dd class="col-sm-9">{{ form.UpdatedAtText }}</dd>
                            </dl> 
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-danger btn-sm" v-on:click="deleteItem">Delete</button>
                        </div>
                    </div>
                </div>
            </div>


        </div>


@section scripts
{
  <script type="text/javascript">

        $(document).ready(function () {
            
            var _form = {
                Id: 0,
Name: "",
Code: "",
BillGroupId: "",
Info: "",
SortId: "",
Icon: ""
            };

            var _formsearch = {
                Id: 0,
Name: "",
Code: "",
BillGroupId: "",
Info: "",
SortId: "",
Icon: ""
            };
            var _columns = [
                {
                    "data": "Id",
                    "render": function (data, type, row, meta) {
                        return '<a href="javascript:;" onclick="FormUtil.FormUpdate(' + data + ')"><i class="fa fa-edit"></i></a> <a href="javascript:;" onclick="FormUtil.FormDetail(' + data + ')"><i class="fa fa-external-link-alt"></i></a>';
                    }
                },
                
{"data": "Name" },
{"data": "Code" },
{"data": "BillGroupId" },
{"data": "Info" },
{"data": "SortId" },
{"data": "Icon" },
{"data": "RecordStatusText" },
{"data": "CreatedAtText" },
{"data": "UpdatedAtText" }
            ];

            var _list = {
                id: 0
            };

            FormUtil.Init({
                entity: 'BillGategories',
                url: '@sim',
                form: _form,
                formsearch: _formsearch,
                columns: _columns,
                table: 'grid',
                createModal: 'crudModal',
                updateModal: 'crudModal',
                detailModal: 'detailModal',
                list: _list
            });
        });
    </script>
}


-------------------------------------------------

