

    /// <summary>
    /// %N% CRUD
    /// </summary>    
    [Route("api/[controller]")]
    [ApiController]
    public class %N%Controller : BaseApiController
    {
        private readonly ILogicModule Logic; 

        public %N%Controller(ILogicModule logic)
        {
            Logic = logic; 
        }


        /// <summary>
        /// Search, Page, filter and Shaped %N%
        /// </summary>
        /// <param name='sort'></param>
        %D%/// <param name='page'></param>
        /// <param name='pageSize'></param>
        /// <param name='fields'></param>
        /// <param name='draw'></param>
        /// <returns></returns> 
        [Route('Search', Name = '%H%Api')]
        [HttpGet]
        public IActionResult Get(string sort = 'id', %P%, long page = 1, long pageSize = 10, string fields= '', int draw = 1)
        {  
            try
            {
                var items = Logic.%Z%.%H%Logic.SearchView(%V%,page, pageSize, sort);
                
                if (page > items.TotalPages) page = items.TotalPages;
                var jo = new JObjectHelper(); 
                %J%
                jo.Add('fields', fields); 
                jo.Add('sort', sort);                 
                AddHeader("X-Pagination", Pagination.Paint(jo, page, pageSize, items.TotalItems, draw));
                var dto = new List<%H%Model>();
                if (items.TotalItems <= 0) return Ok(dto); 
                var dtos = items.Items.ShapeList(fields);
                return Ok(dtos);
            }
            catch(Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        }
        
        /// <summary>
        /// Get %H% by ID
        /// </summary>
        /// <param name='id'></param>
        /// <returns></returns>
        [HttpGet]
        [Route('Detail')] 
        public IActionResult Get(%T% id)
        {
            try
            {
                var item = Logic.%Z%.%H%Logic.GetModel(id);
                if (item == null)
                {
                    return NotFound();
                }
                return Ok(item);
            }
            catch(Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        }

         /// <summary>
        /// Add %H%
        /// </summary>
        /// <param name='form'></param>
        /// <returns></returns>
        [Route('Create')]
        [HttpPost] 
        public IActionResult Create(%H%Form form)
        {
            try
            {
                var model = Logic.%Z%.%H%Logic.Create(form);
                var check = Logic.%Z%.%H%Logic.CreateExists(model);
                if (check)
                {
                    return BadRequest('%H% already exists');
                }
                var dto = Logic.%Z%.%H%Logic.Insert(model);
                return Ok(dto);
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        }

                /// <summary>
        /// Update %H%
        /// </summary>
        /// <param name='id'></param>
        /// <param name='form'></param>
        /// <returns></returns>
        [Route('Update')]
        [HttpPost] 
        public IActionResult Update(%T% id, %H%Form form)
        {
            try
            {
                var model = Logic.%Z%.%H%Logic.Create(form);
                if (id != model.Id)
                    return BadRequest('Route Parameter does mot match model ID'); 
                var found = Logic.%Z%.%H%Logic.Get(id);
                if (found == null)
                    return NotFound(); 
                var check = Logic.%Z%.%H%Logic.UpdateExists(model); 
                if (check)
                    return BadRequest('%H% already exists');
                var dto = Logic.%Z%.%H%Logic.Update(found, model,
                    '%U%');
                return Ok(dto);
            } 
            catch (Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        }

        /// <summary>
        /// Delete %H%
        /// </summary>
        /// <param name='id'></param>
        /// <returns></returns>
        [Route('Delete')]
        [HttpPost] 
        public IActionResult Delete(%T% id)
        {
            try
            {
                var found = Logic.%Z%.%H%Logic.Get(id);
                if (found == null)
                    return NotFound();
                Logic.%Z%.%H%Logic.Delete(found); 
                return Ok(found);
            } 
            catch (Exception ex)
            {
                Log.Error(ex);
                return BadRequest(ex.Message);
            }
        } 
    }
