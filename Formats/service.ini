     /// <summary>
        /// %H% Logic Extensions
        /// </summary>
  public partial class %H%Logic : BaseLogic
        {

        }

        /// <summary>
        /// %H% Logic
        /// </summary>
        public partial class %H%Logic : BaseLogic
        {
            #region CodeGen

            private readonly IDataModule Data; 
            private readonly IFactoryModule Factory;

            
            /// <summary>
            /// 
            /// </summary>
            /// <param name="data"></param>
            /// <param name="factory"></param>
            public %H%Logic(IDataModule data, IFactoryModule factory)
            {
                Data = data;
                Factory = factory;
                    
            }


            /// <summary>
            /// IEnumerable %H% Entity Search
            /// <param name='sort'></param>
            /// </summary>
            %D%/// <returns></returns>
            public IEnumerable<%H%> Search(%P%, string sort = '')
            {
                return Data.%Z%.%N%.Search(%V%,sort);
            }
             

            
            /// <summary>
            /// Paged %H% Model Search
            /// </summary>
            %D%/// <param name='page'></param>
            ///<param name='pageSize'></param>
            ///<param name='sort'></param>
            /// <returns></returns>
            public Page<%H%Model> SearchView(%P%,
                long page = 1,long pageSize = 10, string sort = '')
            {
                return Data.%Z%.%N%.SearchView(%V%, page, pageSize, sort);
            }

            /// <summary>
            /// Create %H% Model from %H% Entity
            /// </summary>
            /// <param name='entity'></param>
            /// <returns></returns>
            public %H%Model Create(%H% entity)
            {
                return Factory.%Z%.%N%.CreateModel(entity);
            }

	        /// <summary>
            /// Create %H% Model from %H% Form
            /// </summary>
            /// <param name='form'></param>
            /// <returns></returns>
            public %H%Model Create(%H%Form form)
            {
                return Factory.%Z%.%N%.CreateModel(form);
            }

            /// <summary>
            /// Create %H% Entity from %H% Model
            /// </summary>
            /// <param name='model'></param>
            /// <returns></returns>
            public %H% Create(%H%Model model)
            {
                return Factory.%Z%.%N%.CreateEntity(model);
            }

            /// <summary>
            /// Check Uniqueness of %H% before creation
            /// </summary>
            /// <param name='model'></param>
            /// <returns></returns>
            public bool CreateExists(%H%Model model)
            {
                return Data.%Z%.%N%.ItemExists(model);
            }

            /// <summary>
            /// Delete %H%
            /// </summary>
            /// <param name='entity'></param>
            /// <returns></returns>
            public int Delete(%H% entity)
            {
                return Data.%Z%.%N%.Delete(entity);
            }

            /// <summary>
            /// Get %H% Entity
            /// </summary>
            /// <param name='id'></param>
            /// <returns></returns>
            public %H% Get(%T% id)
            {
                return Data.%Z%.%N%.Get(id);
            }



            /// <summary>
            /// Get %H% Model
            /// </summary>
            /// <param name='id'></param>
            /// <returns></returns>
            public %H%Model GetModel(%T% id)
            { 
                return Data.%Z%.%N%.GetModel(id);
            }

            /// <summary>
            /// Insert new %H% to DB
            /// </summary>
            /// <param name='model'></param>
            /// <param name='check'></param>
            /// <returns></returns>
            public %H%Model Insert(%H%Model model, bool check = true)
            {
                if (check)
                {
                    var routeSearch = Data.%Z%.%N%.ItemExists(model);
                    if (routeSearch)
                    {
                        throw new Exception('%H% Name already exists');
                    }
                }
                var entity = Factory.%Z%.%N%.CreateEntity(model);
                entity.RecordStatus = Core.Domain.Enums.RecordStatus.Active;
                Data.%Z%.%N%.Insert(entity);
                return Factory.%Z%.%N%.CreateModel(entity);
            }

            /// <summary>
            /// Update a %H% Entity with a %H% Model with selected fields
            /// </summary>
            /// <param name='entity'></param>
            /// <param name='model'></param>
            /// <param name='fields'></param>
            /// <returns></returns>
            public %H% Patch(%H% entity, %H%Model model, string fields)
            {
                return Factory.%Z%.%N%.Patch(entity, model, fields);
            }

            /// <summary>
            /// Update %H%, with Patch Options Optional
            /// </summary>
            /// <param name='entity'></param>
            /// <param name='model'></param>
            /// <param name='fields'></param>
            /// <returns></returns>
            public %H%Model Update(%H% entity, %H%Model model = null, string fields = '')
            {
                if (model != null)
                {
                    entity = Patch(entity, model, fields);
                }
                return Factory.%Z%.%N%.CreateModel(Data.%Z%.%N%.Update(entity));
            }

            /// <summary>
            /// Check Uniqueness of %H% before update
            /// </summary>
            /// <param name='model'></param>
            /// <returns></returns>
            public bool UpdateExists(%H%Model model)
            {
                return Data.%Z%.%N%.ItemExists(model, model.Id);
            }

            #endregion

    }